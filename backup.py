import sqlite3
import shutil
import os
from datetime import datetime

def backup_database(source_db="meeting_room.db", backup_dir="backups"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–µ–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(backup_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"meeting_room_backup_{timestamp}.db"
    backup_path = os.path.join(backup_dir, backup_filename)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(source_db):
            print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {source_db} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
        shutil.copy2(source_db, backup_path)
        
        print(f"‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –±–µ–∫–∞–ø–∞: {os.path.getsize(backup_path)} –±–∞–π—Ç")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        cleanup_old_backups(backup_dir)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞: {e}")
        return False

def cleanup_old_backups(backup_dir="backups", keep_last=5):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N)"""
    
    try:
        backup_files = [f for f in os.listdir(backup_dir) if f.endswith('.db')]
        backup_files.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        
        for old_backup in backup_files[keep_last:]:
            old_backup_path = os.path.join(backup_dir, old_backup)
            os.remove(old_backup_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±–µ–∫–∞–ø: {old_backup}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤: {e}")

def list_backups(backup_dir="backups"):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–µ–∫–∞–ø–æ–≤"""
    
    try:
        backup_files = [f for f in os.listdir(backup_dir) if f.endswith('.db')]
        backup_files.sort(reverse=True)
        
        if not backup_files:
            print("üì¶ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤")
            return
        
        print("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∫–∞–ø—ã:")
        for i, backup_file in enumerate(backup_files, 1):
            backup_path = os.path.join(backup_dir, backup_file)
            size = os.path.getsize(backup_path)
            print(f"  {i}. {backup_file} ({size} –±–∞–π—Ç)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–µ–∫–∞–ø–æ–≤: {e}")

def restore_database(backup_file, target_db="meeting_room.db", backup_dir="backups"):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–µ–∫–∞–ø–∞"""
    
    backup_path = os.path.join(backup_dir, backup_file)
    
    try:
        if not os.path.exists(backup_path):
            print(f"‚ùå –§–∞–π–ª –±–µ–∫–∞–ø–∞ {backup_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        current_backup = f"meeting_room_before_restore_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        shutil.copy2(target_db, os.path.join(backup_dir, current_backup))
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã: {current_backup}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        shutil.copy2(backup_path, target_db)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {backup_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "backup":
            backup_database()
        elif command == "list":
            list_backups()
        elif command == "restore" and len(sys.argv) > 2:
            backup_file = sys.argv[2]
            restore_database(backup_file)
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python backup_db.py backup    - —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø")
            print("  python backup_db.py list      - —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤")
            print("  python backup_db.py restore [–∏–º—è_–±–µ–∫–∞–ø–∞] - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±–µ–∫–∞–ø–∞")
    else:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        backup_database()

if __name__ == "__main__":
    main()