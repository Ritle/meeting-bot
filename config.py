import json
import os
from datetime import datetime

class Config:
    def __init__(self, config_file='settings.json'):
        self.config_file = config_file
        self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.config_file):
            self.create_default_config()
        
        with open(self.config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        self.token = config.get('token', 'YOUR_BOT_TOKEN_HERE')
        self.working_hours = config.get('working_hours', {'start': '08:00', 'end': '20:00'})
        self.booking_range_days = config.get('booking_range_days', 14)
        self.time_intervals = config.get('time_intervals', [15, 30, 45, 60, 75, 90, 105, 120, 150, 180, 210, 240])
        self.database_file = config.get('database_file', 'meeting_room.db')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications = config.get('notifications', {
            'enable': True,
            'reminder_minutes': 15,
            'reminder_message': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç!\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –í—Ä–µ–º—è: {start_time} - {end_time}\nüìç –ú–µ—Å—Ç–æ: –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞'
        })
    
    def create_default_config(self):
        """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_config = {
            "token": "YOUR_BOT_TOKEN_HERE",
            "working_hours": {
                "start": "08:00",
                "end": "20:00"
            },
            "booking_range_days": 14,
            "time_intervals": [15, 30, 45, 60, 75, 90, 105, 120, 150, 180, 210, 240],
            "database_file": "meeting_room.db",
            "notifications": {
                "enable": True,
                "reminder_minutes": 15,
                "reminder_message": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –±—Ä–æ–Ω—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç!\n\nüìÖ –î–∞—Ç–∞: {date}\nüïê –í—Ä–µ–º—è: {start_time} - {end_time}\nüìç –ú–µ—Å—Ç–æ: –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=4, ensure_ascii=False)
        
        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ settings.json")
    
    def get_working_start_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∫–∞–∫ –æ–±—ä–µ–∫—Ç time"""
        return datetime.strptime(self.working_hours['start'], '%H:%M').time()
    
    def get_working_end_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∫–∞–∫ –æ–±—ä–µ–∫—Ç time"""
        return datetime.strptime(self.working_hours['end'], '%H:%M').time()
    
    def get_time_intervals_formatted(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        formatted_intervals = []
        for minutes in self.time_intervals:
            hours = minutes // 60
            mins = minutes % 60
            text = ""
            if hours > 0:
                text += f"{hours} —á "
            if mins > 0:
                text += f"{mins} –º–∏–Ω"
            formatted_intervals.append((minutes, text.strip()))
        return formatted_intervals

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()