import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import sqlite3
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime, timedelta

from config import config
# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å:
from database import init_db_manager, get_db_manager
import threading
import time as time_module



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler(
            'logs/bot.log', 
            maxBytes=1024*1024*10,  # 10MB
            backupCount=5
        ),
        logging.StreamHandler()
    ]
)
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_thread = None
stop_notification_thread = False

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
def get_available_dates():
    dates = []
    for i in range(config.booking_range_days):
        date = datetime.now() + timedelta(days=i)
        dates.append(date.strftime("%d.%m.%Y"))
    return dates

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_time_matrix():
    times = []
    start_hour = config.get_working_start_time().hour
    end_hour = config.get_working_end_time().hour
    
    for hour in range(start_hour, end_hour + 1):
        times.append(f"{hour:02d}:00")
        if hour < end_hour:
            times.append(f"{hour:02d}:30")
    return times


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_notification(bot, user_id, booking_info):
    try:
        message = config.notifications['reminder_message'].format(
            minutes=config.notifications['reminder_minutes'],
            date=booking_info['date'],
            start_time=booking_info['start_time'],
            end_time=booking_info['end_time']
        )
        bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def notification_worker(bot):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global stop_notification_thread
    
    while not stop_notification_thread:
        try:
            if config.notifications['enable']:
                db_manager = get_db_manager()
                bookings = db_manager.get_bookings_for_notification(config.notifications['reminder_minutes'])
                for booking in bookings:
                    booking_id, user_id, user_name, date, start_time, end_time = booking
                    
                    booking_info = {
                        'date': date,
                        'start_time': start_time,
                        'end_time': end_time
                    }
                    
                    send_notification(bot, user_id, booking_info)
                    db_manager.mark_as_notified(booking_id)
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            time_module.sleep(60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            time_module.sleep(60)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def start_notification_thread(bot):
    global notification_thread, stop_notification_thread
    
    if notification_thread is None or not notification_thread.is_alive():
        stop_notification_thread = False
        notification_thread = threading.Thread(target=notification_worker, args=(bot,), daemon=True)
        notification_thread.start()
        logger.info("–ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def stop_notification_thread_func():
    global stop_notification_thread
    stop_notification_thread = True
    logger.info("–ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATES = {}

class BookingState:
    DATE = "date"
    START_TIME = "start_time"
    DURATION = "duration"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
def show_main_menu(update: Update, message_text="ü§ñ –ë–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã"):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="book_room")],
        [InlineKeyboardButton("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="show_schedule")],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="my_bookings")],
        [InlineKeyboardButton("üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏", callback_data="cancel_my_bookings")],
        [InlineKeyboardButton("üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="show_rating")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'message') and update.message:
        update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif hasattr(update, 'callback_query'):
        update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):

    user_id = update.effective_user.id
    user_name = update.effective_user.username or update.effective_user.first_name
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db_manager = get_db_manager()
    db_manager.save_user(user_id, user_name, first_name, last_name)

    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã!* \n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:\n"
        "‚Ä¢ *üöÄ –ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
        "‚Ä¢ *üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ *üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è* - –í–∞—à–∏ –±—Ä–æ–Ω–∏\n"
        "‚Ä¢ *üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏* - –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ *‚ùì –ü–æ–º–æ—â—å* - –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    )
    show_main_menu(update, welcome_text)

# –ö–æ–º–∞–Ω–¥–∞ /help
def help_command(update: Update, context: CallbackContext):
    help_text = f"""
    ü§ñ –ë–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã

    üìö –ö–æ–º–∞–Ω–¥—ã:
    /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /book - –ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    /schedule - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    /mybookings - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

    üìã –ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
    1. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞
    3. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
    5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

    ‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {config.working_hours['start']} - {config.working_hours['end']}
    üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞: {config.booking_range_days} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∑–∞ {config.notifications['reminder_minutes']} –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑–æ–≤ callback query –∏–ª–∏ –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if hasattr(update, 'callback_query') and update.callback_query:
        # –í—ã–∑–æ–≤ –∏–∑ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)
    elif hasattr(update, 'message') and update.message:
        # –í—ã–∑–æ–≤ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message.reply_text(help_text)
    else:
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–∑–æ–≤–∞: {update}")

# –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –¥–∞—Ç—ã
def start_booking(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    USER_STATES[user_id] = {
        'state': BookingState.DATE, 
        'user_id': user_id, 
        'user_name': query.from_user.username or query.from_user.first_name
    }
    
    keyboard = []
    dates = get_available_dates()
    
    # –°–æ–∑–¥–∞—ë–º –º–∞—Ç—Ä–∏—Ü—É –¥–∞—Ç 2x4
    row = []
    for i, date in enumerate(dates):
        row.append(InlineKeyboardButton(date, callback_data=f"date_{date}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*", reply_markup=reply_markup, parse_mode='Markdown')

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
def show_time_picker(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in USER_STATES:
        return
    
    date = query.data.split("_", 1)[1]
    USER_STATES[user_id]['date'] = date
    USER_STATES[user_id]['state'] = BookingState.START_TIME
    
    # –°–æ–∑–¥–∞—ë–º –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ 4x4
    times = get_time_matrix()
    keyboard = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 4 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(times), 4):
        row_times = times[i:i+4]
        row = []
        for time in row_times:
            row.append(InlineKeyboardButton(time, callback_data=f"start_{time}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_room")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f"üïê *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({date}):*", reply_markup=reply_markup, parse_mode='Markdown')

# –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def show_duration_picker(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in USER_STATES:
        return
    
    start_time = query.data.split("_", 1)[1]
    USER_STATES[user_id]['start_time'] = start_time
    USER_STATES[user_id]['state'] = BookingState.DURATION
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    keyboard = []
    formatted_intervals = config.get_time_intervals_formatted()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(formatted_intervals), 2):
        row_intervals = formatted_intervals[i:i+2]
        row = []
        for minutes, text in row_intervals:
            row.append(InlineKeyboardButton(text, callback_data=f"duration_{minutes}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"date_{USER_STATES[user_id]['date']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f"‚è±Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
        f"üìÖ –î–∞—Ç–∞: {USER_STATES[user_id]['date']}\n"
        f"üïê –ù–∞—á–∞–ª–æ: {start_time}", 
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def handle_duration_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.username or query.from_user.first_name
    
    if user_id not in USER_STATES:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
    duration = int(query.data.split("_")[1])
    start_time = USER_STATES[user_id]['start_time']
    date = USER_STATES[user_id]['date']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    start_dt = datetime.strptime(start_time, "%H:%M")
    end_dt = start_dt + timedelta(minutes=duration)
    end_time = end_dt.strftime("%H:%M")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    end_limit = datetime.strptime(config.working_hours['end'], "%H:%M")
    if end_dt > end_limit:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"start_{start_time}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f"‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–¥–æ {config.working_hours['end']})!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.", 
            reply_markup=reply_markup
        )
        return
    
    USER_STATES[user_id]['end_time'] = end_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
    db_manager = get_db_manager()
    if db_manager.is_conflict(date, start_time, end_time):
        conflicting_booking = db_manager.get_conflicting_booking(date, start_time, end_time)
        if conflicting_booking:
            conflicting_user, conflicting_start, conflicting_end = conflicting_booking
            conflict_message = (
                f"‚ùå –í —ç—Ç–æ –≤—Ä–µ–º—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!\n\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üïê –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {conflicting_start} - {conflicting_end}\n"
                f"üë§ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª: @{conflicting_user}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
            )
        else:
            conflict_message = "‚ùå –í —ç—Ç–æ –≤—Ä–µ–º—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book_room")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(conflict_message, reply_markup=reply_markup)
        del USER_STATES[user_id]
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    db_manager.save_booking(user_id, user_name, date, start_time, end_time)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    hours = duration // 60
    minutes = duration % 60
    duration_text = ""
    if hours > 0:
        duration_text += f"{hours} —á "
    if minutes > 0:
        duration_text += f"{minutes} –º–∏–Ω"
    
    success_message = (
        f"‚úÖ –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üïê –í—Ä–µ–º—è: {start_time} - {end_time}\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
        f"üë§ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª: @{user_name}"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(success_message, reply_markup=reply_markup)
    del USER_STATES[user_id]

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def show_schedule(update: Update, context: CallbackContext):
    query = update.callback_query
    db_manager = get_db_manager()
    bookings = db_manager.get_all_bookings()
    
    if not bookings:
        message = "üìÖ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"
    else:
        message = "*üìÖ –¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
        current_date = ""
        
        for date, start_time, end_time, user_name in bookings:
            if date != current_date:
                current_date = date
                message += f"üìÜ *{date}:*\n"
            message += f"  üïê {start_time}-{end_time} (@{user_name})\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
def show_my_bookings(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.username or query.from_user.first_name
    
    db_manager = get_db_manager()
    bookings = db_manager.get_user_bookings(user_id)
    
    if not bookings:
        message = "üìÖ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*"
    else:
        message = f"*üìÖ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (@{user_name}):*\n\n"
        current_date = ""
        
        for date, start_time, end_time in bookings:
            if date != current_date:
                current_date = date
                message += f"üìÜ *{date}:*\n"
            message += f"  üïê {start_time}-{end_time}\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –û—Ç–º–µ–Ω–∞ –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
def cancel_my_bookings(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    db_manager = get_db_manager();
    result = db_manager.cancel_user_bookings(user_id)
    if result:
        message = "‚úÖ *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã*"
    else:
        message = "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã*"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def book_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /book - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    class FakeCallbackQuery:
        def __init__(self, update):
            self.from_user = update.effective_user
            self.message = update.message
            
        def edit_message_text(self, *args, **kwargs):
            self.message.reply_text(*args, **kwargs)
    
    fake_query = FakeCallbackQuery(update)
    fake_update = type('obj', (object,), {'callback_query': fake_query, 'effective_user': update.effective_user})
    
    start_booking(fake_update, context)

def schedule_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /schedule - –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    db_manager = get_db_manager()
    bookings = db_manager.get_all_bookings()
    
    if not bookings:
        update.message.reply_text("üìÖ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*", parse_mode='Markdown')
        return
    
    message = "*üìÖ –¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
    current_date = ""
    
    for date, start_time, end_time, user_name in bookings:
        if date != current_date:
            current_date = date
            message += f"üìÜ *{date}:*\n"
        message += f"  üïê {start_time}-{end_time} (@{user_name})\n"
    
    update.message.reply_text(message, parse_mode='Markdown')

def my_bookings_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /mybookings - –ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    user_name = update.effective_user.username or update.effective_user.first_name
    
    db_manager = get_db_manager()
    bookings = db_manager.get_user_bookings(user_id)
    
    if not bookings:
        update.message.reply_text("üìÖ *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π*", parse_mode='Markdown')
        return
    
    message = f"*üìÖ –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (@{user_name}):*\n\n"
    current_date = ""
    
    for date, start_time, end_time in bookings:
        if date != current_date:
            current_date = date
            message += f"üìÜ *{date}:*\n"
        message += f"  üïê {start_time}-{end_time}\n"
    
    update.message.reply_text(message, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
def show_specific_rating(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_type = query.data.replace("rating_", "")
    
    current_date = datetime.now()
    year = current_date.year
    month = current_date.month
    
    if rating_type == "month":
        period_text = f"–∑–∞ {current_date.strftime('%B %Y')}"
        year_filter = year
        month_filter = month
    elif rating_type == "year":
        period_text = f"–∑–∞ {year} –≥–æ–¥"
        year_filter = year
        month_filter = None
    else:  # all_time
        period_text = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
        year_filter = None
        month_filter = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø—ã
    db_manager = get_db_manager()
    
    top_bookings = db_manager.get_top_users_by_bookings(year_filter, month_filter, 3)
    top_duration = db_manager.get_top_users_by_duration(year_filter, month_filter, 3)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message = f"üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {period_text}:\n\n"
    
    # –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    message += "üìà –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n"
    if top_bookings:
        for i, (user_id, username, count) in enumerate(top_bookings, 1):
            medal = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else f"{i}."
            username = username or f"user_{user_id}"  # –ï—Å–ª–∏ username None
            message += f"  {medal} @{username} - {count} –±—Ä–æ–Ω.\n"
    else:
        message += "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    message += "\n"
    
    # –¢–æ–ø –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤ —á–∞—Å–∞—Ö)
    message += "‚è±Ô∏è –ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
    if top_duration:
        for i, (user_id, username, minutes) in enumerate(top_duration, 1):
            hours = minutes // 60
            mins = minutes % 60
            duration_text = f"{hours}—á {mins}–º–∏–Ω" if hours > 0 else f"{mins}–º–∏–Ω"
            medal = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else f"{i}."
            username = username or f"user_{user_id}"  # –ï—Å–ª–∏ username None
            message += f"  {medal} @{username} - {duration_text}\n"
    else:
        message += "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    keyboard = [
        [InlineKeyboardButton("üìä –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="show_rating")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup)  # –ë–µ–∑ parse_mode

def cancel_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    db_manager = get_db_manager()
    result = db_manager.cancel_user_bookings(user_id)
    if result:
        update.message.reply_text("‚úÖ *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã*", parse_mode='Markdown')
    else:
        update.message.reply_text("‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã*", parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    query.answer()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "main_menu":
        start(update, context)
        return
    
    # –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    elif query.data == "book_room":
        start_booking(update, context)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    elif query.data == "show_schedule":
        show_schedule(update, context)
        return
    
    # –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    elif query.data == "my_bookings":
        show_my_bookings(update, context)
        return
    
    # –û—Ç–º–µ–Ω–∞ –º–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    elif query.data == "cancel_my_bookings":
        cancel_my_bookings(update, context)
        return
    
    # –ü–æ–º–æ—â—å
    elif query.data == "help":
        help_command(update, context)
        return
    
    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    elif query.data.startswith("date_"):
        show_time_picker(update, context)
        return
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    elif query.data.startswith("start_"):
        show_duration_picker(update, context)
        return
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    elif query.data.startswith("duration_"):
        handle_duration_selection(update, context)
        return
    
    # –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    elif query.data.startswith("disabled_"):
        query.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
      # –†–µ–π—Ç–∏–Ω–≥
    elif query.data == "show_rating":
        show_specific_rating(update, context)
        return
    
    elif query.data.startswith("rating_"):
        show_specific_rating(update, context)
        return

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db_manager(config.database_file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if config.token == "YOUR_BOT_TOKEN_HERE":
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ settings.json")
        return
    
    updater = Updater(config.token, use_context=True)
    dp = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("book", book_command))
    dp.add_handler(CommandHandler("schedule", schedule_command))
    dp.add_handler(CommandHandler("mybookings", my_bookings_command))
    dp.add_handler(CommandHandler("cancel", cancel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    dp.add_handler(CallbackQueryHandler(button_handler))
    
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {config.working_hours['start']} - {config.working_hours['end']}")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {config.booking_range_days} –¥–Ω–µ–π")
    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if config.notifications['enable'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    start_notification_thread(updater.bot)
    
    try:
        updater.start_polling()
        updater.idle()
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        stop_notification_thread_func()
        updater.stop()

if __name__ == '__main__':
    main()